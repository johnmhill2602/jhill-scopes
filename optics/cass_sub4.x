# cass_sub4.x
# generates raytrace input file (lens) for OSLO raytrace program

# 01AUG92 - created by J. M. Hill, Steward Observatory
# 17AUG92 - Reversed iref sign convention.  JMH
# 24SEP92 - Off-axis ellipse for beam combiner.  JMH
# 15FEB93 - Add pseudo exit pupil surface.  JMH
# 22FEB93 - Modify entrance pupil obstruction.  JMH
# 01MAR93 - Force tertiary aperture to major axis.  JMH
# 10MAY93 - Add lens file control flags.  JMH
# 01NOV93 - Afocal combining optics.  JMH

# To Do:  BC off-axis offsets when yocomb isn't 0.0

procedure oslo_rays (rayfile, title)

include "cass_common.h"

# To Do:
#     Add out of plane tilts for beam combiners
#     Work on branches for newtonian secondary

# Parameter Variables
char	rayfile[ARB]	# name of the raytrace input file
char	title[ARB]	# name of the telescope

# Local Variables
string  version   "06-JAN-94"

int	xfd		# file descriptor

int     isurf           # surface counter
# keeps track of number of tracing surfaces

int     iref            # reflection counter
# toggles to keep track of sign convention on distances at mirrors
# also serves to convert meters to millimeters

double  netang, netcng          # net coordinate rotation for tilts
# variable to keep track of the previous rotations at fold mirrors

# Command format strings for OSLO
string  ast_oslo       "AST  %u\n"
string  gto_oslo       "GTO  %u\n"
string  air_oslo       "AIR\n"
string  rfl_oslo       "RFL\n"
string  bk7_oslo       "GLA BK7\n"
string  th_oslo        "TH  %14.6f\n"
string  tho_oslo       "THO %18g\n"
string  oby_oslo       "OBY %18g\n"
string  tla_oslo       "DT -1\nTLA %14.6f\n"
string  tlc_oslo       "TLC %14.6f\n"
string  cv0_oslo       "CV  0.000\n"
string  rd_oslo        "RD  %14.6f\n"
string  ap_oslo        "AP  %14.6f\n"
string  cc_oslo        "CC  %14.8f\n"
string  sap_oslo       "SDT SAP\n"
string  obt_oslo    "OBT  1\nOY1 %14.6f\nOY2 %14.6f\nOX1 %14.6f\nOX2 %14.6f\n"
string  apt_oslo    "APT  1\nAY1 %14.6f\nAY2 %14.6f\nAX1 %14.6f\nAX2 %14.6f\n"
string  pkcv_oslo      "PK  CV  %u\n"
string  pkap_oslo      "PK  AP  %u\n"
string  pkth_oslo      "PK  TH  %u\n"
string  pkthm_oslo     "PK  THM  %u\n"
string  dcy_oslo       "SDT\nDT 1\nDCX %14.6f\nDCY %14.6f\n"
string  sdm_oslo       "PK SDM %u\n"
string  not_oslo       "NOT ""%s %5d""\n"

errchk	open, putline, close, salloc

# Functions
int	open()
int	strlen()
int     access()

begin

# Introduction
   call printf ("Writing OSLO format input file: %s\n")
       call pargstr(rayfile)
   call flush (STDOUT)

# Check for null filename
   if (strlen (rayfile) <= 0 ) {
      call printf ("No filename specified.\n")
		# Make this an error call later.
      call flush (STDOUT)
   }

# Does the file already exist?  For now delete it.
   if (access (rayfile, WRITE_ONLY, TEXT_FILE) == YES) {
      call printf ("Deleting existing output file.\n")
      call flush (STDOUT)
      call delete (rayfile)
   }

# Open new lens file
   xfd = open (rayfile, NEW_FILE, TEXT_FILE)

# Lens Info
   call fprintf ( xfd, "LEN NEW ""%s""\n")  # LEN must be first command
       call pargstr (title)
   call fprintf ( xfd, "!Generated by SCOPES.OPTICS.CASS version %s.\n")
       call pargstr (version)  # version of this subroutine
   call fprintf ( xfd, "!    written by J. M. Hill, Steward Observatory.\n")
   call fprintf ( xfd, "AMO ANG\n")
   if ( irm2 ) {
      call fprintf ( xfd, "EPR %12f\n")
          call pargd ( d1i * 500.0d0 ) # undersized pupil (approximation?)
   }
   else {
      call fprintf ( xfd, "EPR %12f\n")
          call pargd ( d1 * 500.0d0 )  # primary diameter
   }
      
   if ( rayrl ) { # is the sign of infinity important?
      call fprintf ( xfd, tho_oslo )
          call pargd ( -1.0d20 )
   }
   else {
      call fprintf ( xfd, tho_oslo )
          call pargd (  1.0d20 )
   }
   
   call fprintf ( xfd, oby_oslo ) # object height, sets angle on sky
       call pargd ( - tan( ubar1 ) * 1.0d20 )
      
   call fprintf ( xfd, "DES ""CASS""\nIDN  1\n")

   isurf = 1
   if ( rayrl ) # flag for which way the telescope points (sign convention)
      iref = -1000 # Yes, rays enter from the right
   else
      iref = 1000  # No, rays enter from the left
   
   netang = 2.0d0 * PI2  # starting at 180 deg is important for sign convention
   netcng = 0.0d0
   
# Surface 1  --- the beginning
   call fprintf ( xfd, gto_oslo )
       call pargi ( isurf )
   call fprintf ( xfd, air_oslo)

# Surface 2 --- dummy entrance pupil
      isurf = isurf + 1
   call fprintf ( xfd, gto_oslo )
       call pargi ( isurf )
   # This surface is needed because OSLO will not permit a thickness greater
   # than 10000.0 mm before surface 2, otherwise it assumes "telecentric"
   # per Paul McLaughlin, Sinclair Optics.
   # See also bug notes from 15FEB93,07MAY93.
   if ( !irm2 && raypup && rayobs ) {
      call fprintf ( xfd, bk7_oslo)
   }
   else {
      call fprintf ( xfd, air_oslo)
   }
      
   if ( irm2 ) { # Exit Pupil at Secondary, Entrance Pupil at Conjugate
      call fprintf ( xfd, th_oslo)
          call pargd ( iref * spupil )
#      call fprintf ( xfd, rd_oslo )
#          call pargd ( iref * l1 * 2.0d0 ) # bogus curvature
   }
   else { # Entrance Pupil at Primary
      call fprintf ( xfd, th_oslo)
          call pargd ( 0.0d0 )
      call fprintf ( xfd, rd_oslo )
          call pargd ( - iref * l1 * 2.0d0 )
      # sign of radius differs from iref sign convention
      # but we don't understand why????
      # maybe iref should flip sign AFTER a reflection
   }
   call fprintf ( xfd, not_oslo )
       call pargstr ( "Entrance Pupil" )
       call pargi ( iref )

   if (rnum >= 2 && rayobs) {  # Is there a secondary mirror obstruction?
# Surface 3 --- secondary obstruction
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo)
      call fprintf ( xfd, th_oslo)
          call pargd ( - iref * sep )
      # thickness differs from iref sign convention because next surface
      #     the obstruction, is moving back "up" the incoming rays.
      call fprintf ( xfd, rd_oslo )
          call pargd ( - iref * l1 * 2.0d0 )
      # sign of radius differs from iref sign convention
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Dummy" )
          call pargi ( iref )
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, pkthm_oslo )
          call pargi ( isurf - 1 )
      call fprintf ( xfd, sap_oslo )
      call fprintf ( xfd, obt_oslo )
          call pargd ( - d2v * 500.0d0 )
          call pargd ( d2v * 500.0d0 )
          call pargd (- d2v * 500.0d0 )
          call pargd ( d2v * 500.0d0 )
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Obstruction" )
          call pargi ( iref )
   } # end of secondary obstruction

# Surface 4 --- Primary Mirror
   isurf = isurf + 1
   iref = - iref
   call fprintf ( xfd, gto_oslo )
       call pargi ( isurf )
   call fprintf ( xfd, ast_oslo )        # aperture stop
       call pargi ( isurf )
   call fprintf ( xfd, rfl_oslo)
   if ( rnum >= 2 ) {
      call fprintf ( xfd, th_oslo )
          call pargd ( iref * sep ) # distance to secondary
   }
   else {
      call fprintf ( xfd, th_oslo )
          call pargd ( iref * l1 ) # distance to prime focus
   }
   call fprintf ( xfd, rd_oslo )
       call pargd ( iref * l1 * 2.0d0 )
   call fprintf ( xfd, cc_oslo )
       call pargd (alpha1)
   if ( rayobs ) {
      call fprintf ( xfd, sap_oslo )
      call fprintf ( xfd, apt_oslo )     # edge of primary
          call pargd ( - d1 * 500.0d0 )
          call pargd ( d1 * 500.0d0 )
          call pargd ( - d1 * 500.0d0 )
          call pargd ( d1 * 500.0d0 )
      call fprintf ( xfd, obt_oslo )     # hole in primary
          call pargd ( - d1h * 500.0d0 )
          call pargd ( d1h * 500.0d0 )
          call pargd ( - d1h * 500.0d0 )
          call pargd ( d1h * 500.0d0 )
   }
   call fprintf ( xfd, ap_oslo ) # redundant with SAP or entrance pupil?
       call pargd ( d1 * 500.0d0 )
   call fprintf ( xfd, not_oslo )
       call pargstr ( "Primary" )
       call pargi ( iref )

   if (rnum >= 2) {  # Is there a secondary mirror?
# Surface 4 --- Secondary Mirror
      isurf = isurf + 1
      iref = - iref
      call fprintf ( xfd, gto_oslo )
       call pargi ( isurf )
      if ( irm2 ) {
	 call fprintf ( xfd, ast_oslo )        # aperture stop
	     call pargi ( isurf )
	 call fprintf ( xfd, ap_oslo )
	     call pargd ( d2e * 500.0d0 )
      }
      call fprintf ( xfd, rfl_oslo)
      if ( raypup && !irm2 ) {
	 call fprintf ( xfd, th_oslo )
	     call pargd ( iref * ( spupil ) )  # distance to pupil
      }
      else {  # Don't put in exit pupil surface
	 call fprintf ( xfd, th_oslo )
	     call pargd ( iref * ( bfd - tfd ) )  # distance to tertiary
      }
      call fprintf ( xfd, rd_oslo )
       call pargd ( iref * l2 * 2.0d0)
      call fprintf ( xfd, cc_oslo )
       call pargd (alpha2)
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Secondary" )
          call pargi ( iref )

      if ( raypup && !irm2 ) {
# Surface --- Exit Pupil
	 # This pupil is at the location of the image of the primary vertex.
	 isurf = isurf + 1
	 call fprintf ( xfd, gto_oslo )
	     call pargi ( isurf )
	 call fprintf ( xfd, bk7_oslo )
	 call fprintf ( xfd, rd_oslo )
	     call pargd ( iref * l2 * 2.0d0 )  # This is a bogus curvature.
	 call fprintf ( xfd, ap_oslo )
	     call pargd ( dpupil * 500.0d0 )
	 call fprintf ( xfd, cc_oslo )
	     call pargd ( -1.0d0 )
	 call fprintf ( xfd, not_oslo )
	     call pargstr ( "Exit Pupil" )
	     call pargi ( iref )
# Surface --- Exit Pupil
	 isurf = isurf + 1
	 call fprintf ( xfd, gto_oslo )
	     call pargi ( isurf )
	 call fprintf ( xfd, air_oslo )
	 call fprintf ( xfd, pkcv_oslo )
	     call pargi ( isurf - 1 )
	 call fprintf ( xfd, pkap_oslo )
	     call pargi ( isurf - 1 )
	 call fprintf ( xfd, th_oslo )
	     call pargd ( iref * ( bfd - tfd - spupil ) )
      } # end of exit pupil surface
   } # end of secondary mirror

   if (rnum >= 3) {  # Is there a tertiary mirror?
# Surface 5 --- Tertiary
# Fold mirrors need a tilt surface at and behind the reflection.
# These both rotate in the same direction by the tilt of the mirror relative
#  to the oncoming ray.
# Rotation angle has 180 degree ambiguity --- is this whole routine mirrorred?
#  Except for preserving the curvature/thickness sign convention.
      
      isurf = isurf + 1
      iref = - iref
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, rfl_oslo)
      call fprintf ( xfd, cv0_oslo)  # flat
      call fprintf ( xfd, ap_oslo )  # major axis diameter
          call pargd ( d3maj * 500.0d0 )
      call fprintf ( xfd, tla_oslo ) # tilt around x-axis
          call pargd ( ( netang + at ) * DEG_RAD )
      if ( rayud ) { # bend light up from tertiary
	 call fprintf ( xfd, tlc_oslo ) # tilt around z-axis
             call pargd ( ( netcng + az ) * DEG_RAD - 180.0 )
      }
      else { # bend light down from teritary
	 call fprintf ( xfd, tlc_oslo ) # tilt around z-axis
            call pargd ( ( netcng + az  ) * DEG_RAD )
      }
      netcng = netcng + az
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Tertiary" )
          call pargi ( iref )
# Surface 
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      if ( rnum == 3 ) {
	 call fprintf ( xfd, th_oslo )
             call pargd ( iref * tfd ) # tertiary to focal plane
      }
      else if ( rnum == 5 && fs != 0.0d0 ) {
	 call fprintf ( xfd, th_oslo )
             call pargd ( iref * tfd ) # tertiary to first focal plane
      }
      else if ( rnum == 5 && fs == 0.0d0 ) {
	 call fprintf ( xfd, th_oslo )
             call pargd ( iref * ffa ) # tertiary to fold flat
      }
      else {
	 call fprintf ( xfd, th_oslo )
             call pargd ( iref * ( tfd - bcfd ) ) # tertiary to beam combiner
      }
      call fprintf ( xfd, tla_oslo ) # tilt around x-axis
          call pargd ( ( netang + at ) * DEG_RAD )
      netang = netang + iref * at / 500.0d0
   } # end if tertiary
   
   if (rnum == 4) {  # Is there a beam combiner mirror?
# Fold mirrors need a tilt surface at and behind the reflection.
# These both rotate in the same direction by the tilt of the mirror relative
#  to the oncoming ray.
# After the first fold, you must subtract off the total previous tilts
#  in order to use the mirror angle from global coordinates.
# Surface --- Beam Combiner
      isurf = isurf + 1
      iref = - iref
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, rfl_oslo)
      call fprintf ( xfd, cv0_oslo)
      call fprintf ( xfd, tla_oslo ) # tilt around x-axis
           call pargd ( ( netang + abp ) * DEG_RAD )
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Beam Combiner" )
          call pargi ( iref )
# Surface --- Beam Combiner
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, th_oslo )
       call pargd ( iref * bcfd )
      call fprintf ( xfd, tla_oslo ) # tilt around x-axis
           call pargd ( ( netang + abp ) * DEG_RAD )
      netang = netang + 2.0d0 * abp
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Beam Combiner Tilt" )
          call pargi ( iref )

# Surface --- Focal Plane Tilt
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, tla_oslo ) # tilt around x-axis
#          call pargd ( ( netang + aa ) * DEG_RAD )
          call pargd ( ( aa ) * DEG_RAD )
#      netang = netang + aa
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Focal Plane Tilt" )
          call pargi ( iref )
   } # end if beam combiner

   if ( fs != 0.0d0 ) { # first focal plane if not afocal
# Surface --- Focal Plane
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, bk7_oslo )
      call fprintf ( xfd, rd_oslo )
          call pargd ( - iref * fproc )    # differs from iref sign convention
      call fprintf ( xfd, ap_oslo )
          call pargd ( fpdia * 500.0d0 )
      call fprintf ( xfd, cc_oslo )
          call pargd ( -1.0d0 )
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Curved Focal Plane" )
          call pargi ( iref )
# Surface --- Focal Plane
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, pkcv_oslo )
          call pargi ( isurf - 1 )
      call fprintf ( xfd, pkap_oslo )
          call pargi ( isurf - 1 )

# Surface --- Focal Plane
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, bk7_oslo )
      call fprintf ( xfd, cv0_oslo )
      call fprintf ( xfd, ap_oslo )
          call pargd ( fpdia * 500.0d0 )
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Flat Focal Plane" )
          call pargi ( iref )
# Surface --- Focal Plane
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, pkcv_oslo )
          call pargi ( isurf - 1 )
      call fprintf ( xfd, pkap_oslo )
          call pargi ( isurf - 1 )
   } # end if first focal plane

   if (rnum == 5 && fs != 0.0d0 ) {  # Is there a reimaging beam combiner?
# Surface --- Distance from First Focus to Fold Flat
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, th_oslo )
          call pargd ( iref * ffa )
# Surface --- Fold Flat, M4
      isurf = isurf + 1
      iref = - iref
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, rfl_oslo)
      call fprintf ( xfd, cv0_oslo)
      call fprintf ( xfd, tla_oslo ) # tilt around x-axis
          call pargd ( ( netang + af ) * DEG_RAD )
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Fold Flat" )
          call pargi ( iref )
# Surface --- Distance from Fold Flat to Beam Combiner
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, th_oslo )
          call pargd ( iref * (ffb - ffa) )
      call fprintf ( xfd, tla_oslo ) # tilt around x-axis
          call pargd ( ( netang + af ) * DEG_RAD )
      netang = netang + 2.0d0 * af
# Surface --- Beam Combiner
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
       call fprintf ( xfd, tla_oslo ) # tilt around x-axis
           call pargd ( aeb * DEG_RAD )
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Rotate Parallel" )
          call pargi ( iref )
# Surface
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, th_oslo )
          call pargd ( eoz * iref )
      call fprintf ( xfd, dcy_oslo )
          call pargd ( eox * iref )
          call pargd ( eoy * iref )         
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Offset to Axis" )
          call pargi ( iref )
# Surface
      isurf = isurf + 1
      iref = - iref
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, rfl_oslo)
      call fprintf ( xfd, rd_oslo )
          call pargd ( iref * l5 * 2.0d0)
      call fprintf ( xfd, cc_oslo )
          call pargd (alpha5)
      # Set aperture for huge ellipse
      call fprintf ( xfd, ap_oslo )
          call pargd ( l5 * 500.0d0 )   # l5 * 2000.0d0 is maximum
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Beam Combiner" )
          call pargi ( iref )
# Surface
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, th_oslo )
          call pargd ( eoz * iref )
      call fprintf ( xfd, sdm_oslo )
           call pargi ( isurf - 2 )
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Offset Return" )
          call pargi ( iref )
# Surface
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
       call fprintf ( xfd, tla_oslo ) # tilt around x-axis
           call pargd ( - aea * DEG_RAD )
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Rotate to Ray" )
          call pargi ( iref )
      # netang  is now unknown in this program!
# Surface
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, th_oslo )
          call pargd ( iref * bcfd )
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Translate" )
          call pargi ( iref )

# Surface --- Focal Plane
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, bk7_oslo )
      call fprintf ( xfd, rd_oslo )
          call pargd ( - iref * fproc )    # differs from iref sign convention
      call fprintf ( xfd, ap_oslo )
          call pargd ( fpdia * 500.0d0 )
      call fprintf ( xfd, cc_oslo )
          call pargd ( -1.0d0 )
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Curved Focal Plane" )
          call pargi ( iref )
# Surface --- Focal Plane
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, pkcv_oslo )
          call pargi ( isurf - 1 )
      call fprintf ( xfd, pkap_oslo )
          call pargi ( isurf - 1 )

# Surface --- Focal Plane
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, bk7_oslo )
      call fprintf ( xfd, cv0_oslo )
      call fprintf ( xfd, ap_oslo )
          call pargd ( fpdia * 500.0d0 )
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Flat Focal Plane" )
          call pargi ( iref )
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, pkcv_oslo )
          call pargi ( isurf - 1 )
      call fprintf ( xfd, pkap_oslo )
          call pargi ( isurf - 1 )

   } # end rnum=5

   else if (rnum == 5 && fs == 0.0d0 ) {  # Is there a afocal beam combiner?
# Surface --- Fold Flat, M4
      isurf = isurf + 1
      iref = - iref
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, rfl_oslo)
      call fprintf ( xfd, cv0_oslo)
      call fprintf ( xfd, tla_oslo ) # tilt around x-axis
          call pargd ( ( netang + af ) * DEG_RAD )
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Fold Flat" )
          call pargi ( iref )
# Surface --- Distance from Fold Flat to Beam Combiner
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, th_oslo )
          call pargd ( iref * ffb )
      call fprintf ( xfd, tla_oslo ) # tilt around x-axis
          call pargd ( ( netang + af ) * DEG_RAD )
      netang = netang + 2.0d0 * af

# Surface --- Beam Combiner
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, dcy_oslo )
          call pargd ( yf * iref )
          call pargd ( xf * iref )  # doesn't account for lateral offset      
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Offset to Axis" )
          call pargi ( iref )
# Surface
      isurf = isurf + 1
      iref = - iref
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, rfl_oslo)
      call fprintf ( xfd, rd_oslo )
          call pargd ( iref * l5 * 2.0d0)
      call fprintf ( xfd, cc_oslo )
          call pargd (alpha5)
      call fprintf ( xfd, ap_oslo )
          call pargd ( d5 * 500.0d0 ) # aperture
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Beam Combiner" )
          call pargi ( iref )
# Surface
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, sdm_oslo )
           call pargi ( isurf - 2 )
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Offset Return" )
          call pargi ( iref )
# Surface
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
       call fprintf ( xfd, tla_oslo ) # tilt around x-axis
           call pargd ( - aap * DEG_RAD )
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Rotate to Ray" )
          call pargi ( iref )
      # netang  is now unknown in this program!
# Surface
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, th_oslo )
          call pargd ( iref * bcfd )
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Translate" )
          call pargi ( iref )

# Surface --- Focal Plane
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, bk7_oslo )
      call fprintf ( xfd, cv0_oslo )
      call fprintf ( xfd, ap_oslo )
          call pargd ( fpdia * 500.0d0 )
      call fprintf ( xfd, not_oslo )
          call pargstr ( "Flat Focal Plane" )
          call pargi ( iref )
      isurf = isurf + 1
      call fprintf ( xfd, gto_oslo )
          call pargi ( isurf )
      call fprintf ( xfd, air_oslo )
      call fprintf ( xfd, pkcv_oslo )
          call pargi ( isurf - 1 )
      call fprintf ( xfd, pkap_oslo )
          call pargi ( isurf - 1 )
   } # end else afocal
   
# End of the telescope
   call fprintf ( xfd, "END  %u\n")
       call pargi ( isurf )

# Close the projected file
	call close ( xfd )

end
